'use strict';

const server = require('../index').server;
const equal = require('chai').assert.strictEqual;
const axios = require('axios');

const connection = axios.create({
    baseURL: 'http://localhost:8000/',
});

// Use an instance that always resolves it's promises so we can then examine them consistently with chai.js
connection.interceptors.response.use(function success(response) {
    return Promise.resolve(response);
}, function failure(response) {
    return Promise.resolve(response);
});

describe('Server', function describe() {
    before(function before() {
        const register = server(8000);

        register('int', { args: [{ name: 'integer', type: 'Number' }], fn: x => x * 2 });
    });

    it('Connect', function it() {
        return connection.get('connect').then(function then(res) {
            equal(res.status, 200);

            equal(res.data, JSON.stringify({
                schema: [{
                    path: 'int',
                    args: [{ name: 'integer', type: 'Number' }],
                }],
            }));
        });
    });

    /**
     * Client can either send requests to a valid endpoint or an invalid endpoint. Invalid endpoints
     * should send back a 404. Valid endpoint requests can be sent with valid or invalid argument
     * sets. Invalid argument sets can either have arguments missing, or of the incorrect type.
     * Valid argument sets can be passed to the function and either succeed or fail.
     */


    it('Function Call- Invalid Endpoint', function it() {
        return connection.post('foo').then(function then(res) {
            equal(res.status, 404);
        });
    });

    it('Function Call- Valid Endpoint, Missing Argument', function it() {
        return connection.post('int').then(function then(res) {
            equal(res.status, 400);
        });
    });

    it('Function Call- Valid Endpoint, Incorrect Argument Type', function it() {
        return connection.post('int', {
            integer: 'hello, world',
        }).then(function then(res) {
            equal(res.status, 200);
        });
    });

    it('Function Call- Valid Endpoint, Correct Argument Type, Call Fail', function it() {
        return connection.post('int', {
            integer: Infinity,
        }).then(function then(res) {
            equal(res.status, 500);
        });
    });

    it('Function Call- Valid Endpoint, Correct Argument Type, Call Succeed', function it() {
        return connection.post('int', {
            integer: 2,
        }).then(function then(res) {
            equal(res.status, 200);
        });
    });

    after(function after() {

    });
});
