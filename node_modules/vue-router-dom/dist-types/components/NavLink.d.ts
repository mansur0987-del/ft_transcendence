import { PropType } from 'vue';
export declare const NavLink: (new () => import("vue").ComponentPublicInstance<{} & {
    replace?: boolean | undefined;
    end?: boolean | undefined;
    tag?: string | undefined;
    state?: object | null | undefined;
    to?: string | import("history").PartialPath | undefined;
    activeClassName?: string | undefined;
    activeStyle?: Record<string, string> | undefined;
    caseSensitive?: boolean | undefined;
    ariaCurrent?: string | undefined;
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, Record<string, any>, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, import("vue").ComponentOptionsBase<{} & {
    replace?: boolean | undefined;
    end?: boolean | undefined;
    tag?: string | undefined;
    state?: object | null | undefined;
    to?: string | import("history").PartialPath | undefined;
    activeClassName?: string | undefined;
    activeStyle?: Record<string, string> | undefined;
    caseSensitive?: boolean | undefined;
    ariaCurrent?: string | undefined;
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string>>) & import("vue").ComponentOptionsBase<Readonly<{
    replace: boolean;
    end: boolean;
    tag: string;
    state: object | null;
    to: import("history").To;
    activeClassName: string;
    activeStyle: Record<string, string>;
    caseSensitive: boolean;
    ariaCurrent: string;
} & {}>, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string> & {
    props: {
        replace: {
            default: boolean;
            required: boolean;
            type: BooleanConstructor;
        };
        tag: {
            default: string;
            required: boolean;
            type: StringConstructor;
        };
        to: {
            default: string;
            required: boolean;
            type: PropType<import("history").To>;
        };
        state: {
            default: undefined;
            required: boolean;
            type: PropType<object | null>;
        };
        activeClassName: {
            default: string;
            required: false;
            type: StringConstructor;
        };
        activeStyle: {
            default: () => {};
            required: false;
            type: PropType<Record<string, string>>;
        };
        caseSensitive: {
            default: boolean;
            required: false;
            type: BooleanConstructor;
        };
        end: {
            default: boolean;
            required: false;
            type: BooleanConstructor;
        };
        ariaCurrent: {
            default: string;
            type: StringConstructor;
            required: false;
        };
    };
} & ThisType<import("vue").ComponentPublicInstance<Readonly<{
    replace: boolean;
    end: boolean;
    tag: string;
    state: object | null;
    to: import("history").To;
    activeClassName: string;
    activeStyle: Record<string, string>;
    caseSensitive: boolean;
    ariaCurrent: string;
} & {}>, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, Record<string, any>, Readonly<{
    replace: boolean;
    end: boolean;
    tag: string;
    state: object | null;
    to: import("history").To;
    activeClassName: string;
    activeStyle: Record<string, string>;
    caseSensitive: boolean;
    ariaCurrent: string;
} & {}>, import("vue").ComponentOptionsBase<Readonly<{
    replace: boolean;
    end: boolean;
    tag: string;
    state: object | null;
    to: import("history").To;
    activeClassName: string;
    activeStyle: Record<string, string>;
    caseSensitive: boolean;
    ariaCurrent: string;
} & {}>, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string>>>;
