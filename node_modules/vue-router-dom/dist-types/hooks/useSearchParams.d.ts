/**
 * Creates a URLSearchParams object using the given initializer.
 *
 * This is identical to `new URLSearchParams(init)` except it also
 * supports arrays as values in the object form of the initializer
 * instead of just strings. This is convenient when you need multiple
 * values for a given key, but don't want to use an array initializer.
 *
 * For example, instead of:
 *
 *   let searchParams = new URLSearchParams([
 *     ['sort', 'name'],
 *     ['sort', 'price']
 *   ]);
 *
 * you can do:
 *
 *   let searchParams = createSearchParams({
 *     sort: ['name', 'price']
 *   });
 */
export declare const createSearchParams: (init?: URLSearchParamsInit) => URLSearchParams;
export declare const useSearchParams: (defaultInit?: string | URLSearchParams | ParamKeyValuePair[] | Record<string, string | string[]> | import("vue").Ref<URLSearchParamsInit> | (() => URLSearchParamsInit) | undefined) => readonly [import("vue").ComputedRef<URLSearchParams>, (nextInit: URLSearchParamsInit, navigateOptions?: {
    replace?: boolean | undefined;
    state?: object | null | undefined;
} | undefined) => void];
declare type ParamKeyValuePair = [string, string];
declare type URLSearchParamsInit = string | ParamKeyValuePair[] | Record<string, string | string[]> | URLSearchParams;
export {};
