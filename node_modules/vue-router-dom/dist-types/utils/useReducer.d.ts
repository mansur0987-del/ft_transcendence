export declare const useReducer: <S extends object, A extends unknown[]>(reducer: (state: S, ...args: A) => void, initialState: S) => readonly [import("vue").DeepReadonly<(S extends import("vue").Ref<any> ? S : import("vue").UnwrapRef<S>) extends import("vue").Ref<any> ? import("vue").Ref<any> & (S extends import("vue").Ref<any> ? S : import("vue").UnwrapRef<S>) : import("vue").UnwrapRef<S extends import("vue").Ref<any> ? S : import("vue").UnwrapRef<S>>>, (...arg: A) => void];
